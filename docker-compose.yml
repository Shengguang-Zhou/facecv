version: '3.8'

services:
  facecv-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: facecv:latest
    container_name: facecv-api
    ports:
      - "7000:7000"
    environment:
      - FACECV_DB_TYPE=mysql
      - FACECV_MYSQL_HOST=mysql
      - FACECV_MYSQL_PORT=3306
      - FACECV_MYSQL_USER=facecv
      - FACECV_MYSQL_PASSWORD=${MYSQL_PASSWORD:-facecv123}
      - FACECV_MYSQL_DATABASE=facecv
      - FACECV_LOG_LEVEL=INFO
      - FACECV_ENVIRONMENT=production
      - FACECV_MODEL_BACKEND=insightface
      - FACECV_MODEL_DEVICE=cpu
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models  # Model cache
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - facecv-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:7000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # GPU-enabled service for NVIDIA GPUs
  facecv-api-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: facecv:gpu
    container_name: facecv-api-gpu
    ports:
      - "7002:7000"
    environment:
      - FACECV_DB_TYPE=mysql
      - FACECV_MYSQL_HOST=mysql
      - FACECV_MYSQL_PORT=3306
      - FACECV_MYSQL_USER=facecv
      - FACECV_MYSQL_PASSWORD=${MYSQL_PASSWORD:-facecv123}
      - FACECV_MYSQL_DATABASE=facecv
      - FACECV_LOG_LEVEL=INFO
      - FACECV_ENVIRONMENT=production
      - FACECV_MODEL_BACKEND=insightface
      - FACECV_MODEL_DEVICE=cuda
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - facecv-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
        # Uncomment if using Docker Compose with GPU support
        # devices:
        #   - driver: nvidia
        #     count: 1
        #     capabilities: [gpu]
    profiles:
      - gpu
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:7000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  facecv-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: facecv:dev
    container_name: facecv-api-dev
    ports:
      - "7001:7000"
    environment:
      - DB_TYPE=sqlite
      - SQLITE_PATH=/app/data/facecv_dev.db
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - facecv-network
    profiles:
      - development

  mysql:
    image: mysql:8.0
    container_name: facecv-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root123}
      - MYSQL_DATABASE=facecv
      - MYSQL_USER=facecv
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-facecv123}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - facecv-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: facecv-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - facecv-api
    networks:
      - facecv-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: facecv-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - facecv-network
    restart: unless-stopped
    profiles:
      - cache

  prometheus:
    image: prom/prometheus
    container_name: facecv-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - facecv-network
    profiles:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: facecv-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - facecv-network
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  facecv-network:
    driver: bridge